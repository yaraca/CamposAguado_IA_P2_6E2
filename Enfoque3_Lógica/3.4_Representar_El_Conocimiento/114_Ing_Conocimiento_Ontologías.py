#Ingenier칤a del Conocimiento: Ontolog칤as
#es una representaci칩n formal de un conjunto de conceptos dentro de un dominio y las relaciones entre esos conceptos
#Se usa para modelar el conocimiento y facilitar la comunicaci칩n entre humanos y m치quinas.
#Componentes: 
# Clases (conceptos): categor칤as o tipos (por ejemplo, Animal, Persona).
# Individuos (instancias): objetos concretos (por ejemplo, "Juan" es una Persona).
# Propiedades (atributos o relaciones): conectan clases e individuos (por ejemplo, "es_amigo_de", "tiene_edad").
#Funci칩n: 
# Compartir conocimiento entre sistemas. Inferir nueva informaci칩n usando razonadores. Crear sistemas m치s comprensibles y mantenibles.
#Aplicaciones: diagn칩stico m칠dico, b칰squeda sem치ntica, sistemas de recomendaci칩n, etc.

#Ejemplo de ingenier칤a del conocimiento: Ontolog칤as
#usar la biblioteca rdflib para crear una peque침a ontolog칤a de animales.

#librerias necesarias
from rdflib import Graph, Literal, RDF, RDFS, Namespace, URIRef #para crear y manipular grafos RDF
#graph es para almacenar la ontolog칤a
#literal es para crear literales RDF (valores de texto, n칰meros, etc.)
#rdf es el vocabulario RDF est치ndar
#rdfs es el vocabulario RDF Schema, que proporciona vocabulario para describir propiedades y clases
#namespace es para definir un espacio de nombres para la ontolog칤a
#uriref es para crear referencias URI (identificadores 칰nicos) para recursos en la ontolog칤a

#crear un grafo RDF para almacenar la ontolog칤a
g = Graph()

#definir un espacio de nombres (Namespace) para la ontolog칤a
EX = Namespace("http://example.org/")

#a침adir el namespace al grafo
g.bind("ex", EX)

#crear las clases principales de la ontolog칤a
g.add((EX.Animal, RDF.type, RDFS.Class)) #definir la clase Animal como una clase RDF
g.add((EX.Mamifero, RDF.type, RDFS.Class)) #definir la clase Mam칤fero como una clase RDF
g.add((EX.Ave, RDF.type, RDFS.Class)) #definir la clase Ave como una clase RDF

#especificar jerarqu칤a: Mam칤fero y Ave son subclases de Animal
g.add((EX.Mamifero, RDFS.subClassOf, EX.Animal)) #definir que Mam칤fero es una subclase de Animal
g.add((EX.Ave, RDFS.subClassOf, EX.Animal)) #definir que Ave es una subclase de Animal

#crear individuos
g.add((EX.Leon, RDF.type, EX.Mamifero)) #definir el individuo Le칩n como un Mam칤fero
g.add((EX.Aguila, RDF.type, EX.Ave)) #definir el individuo 츼guila como un Ave

#a침adir propiedades (por ejemplo, "viveEn")
g.add((EX.viveEn, RDF.type, RDF.Property)) #definir la propiedad viveEn como una propiedad RDF
g.add((EX.viveEn, RDFS.domain, EX.Animal)) #definir el dominio de la propiedad viveEn como Animal
g.add((EX.viveEn, RDFS.range, EX.Habitat)) #definir el rango de la propiedad viveEn como Habitat

#definir instancias de h치bitats
g.add((EX.Sabana, RDF.type, EX.Habitat)) #definir el h치bitat Sabana como un tipo de h치bitat
g.add((EX.Monta침a, RDF.type, EX.Habitat)) #definir el h치bitat Monta침a como un tipo de h치bitat

#relacionar los animales con su h치bitat
g.add((EX.Leon, EX.viveEn, EX.Sabana)) #definir que el Le칩n vive en la Sabana
g.add((EX.Aguila, EX.viveEn, EX.Monta침a)) #definir que el 츼guila vive en la Monta침a

#imprimir todas las declaraciones del grafo
print("游닄 Ontolog칤a generada:\n")
for subj, pred, obj in g:
    print(f"{subj} -- {pred} --> {obj}")

#Ejemplo de salida:
# 游닄 Ontolog칤a generada:

# http://example.org/Monta침a -- http://www.w3.org/1999/02/22-rdf-syntax-ns#type --> http://example.org/Habitat
# http://example.org/viveEn -- http://www.w3.org/1999/02/22-rdf-syntax-ns#type --> http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
# http://example.org/Ave -- http://www.w3.org/1999/02/22-rdf-syntax-ns#type --> http://www.w3.org/2000/01/rdf-schema#Class
# http://example.org/Mamifero -- http://www.w3.org/1999/02/22-rdf-syntax-ns#type --> http://www.w3.org/2000/01/rdf-schema#Class
# http://example.org/Aguila -- http://www.w3.org/1999/02/22-rdf-syntax-ns#type --> http://example.org/Ave
# http://example.org/Leon -- http://www.w3.org/1999/02/22-rdf-syntax-ns#type --> http://example.org/Mamifero
# http://example.org/Aguila -- http://example.org/viveEn --> http://example.org/Monta침a
# http://example.org/viveEn -- http://www.w3.org/2000/01/rdf-schema#domain --> http://example.org/Animal
# http://example.org/Ave -- http://www.w3.org/2000/01/rdf-schema#subClassOf --> http://example.org/Animal
# http://example.org/Sabana -- http://www.w3.org/1999/02/22-rdf-syntax-ns#type --> http://example.org/Habitat
# http://example.org/viveEn -- http://www.w3.org/2000/01/rdf-schema#range --> http://example.org/Habitat
# http://example.org/Animal -- http://www.w3.org/1999/02/22-rdf-syntax-ns#type --> http://www.w3.org/2000/01/rdf-schema#Class
# http://example.org/Mamifero -- http://www.w3.org/2000/01/rdf-schema#subClassOf --> http://example.org/Animal
# http://example.org/Leon -- http://example.org/viveEn --> http://example.org/Sabana
#Como se puede ver, la ontolog칤a describe una jerarqu칤a de clases (Animal, Mam칤fero, Ave) y sus instancias (Le칩n, 츼guila), as칤 como propiedades que conectan estas clases e individuos.
#Esta representaci칩n permite realizar inferencias y consultas sobre el conocimiento representado, facilitando la interoperabilidad entre sistemas.
#La ontolog칤a puede ser ampliada con m치s clases, individuos y propiedades seg칰n sea necesario.
